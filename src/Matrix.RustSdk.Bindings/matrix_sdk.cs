// <auto-generated>
//     This file was generated by uniffi-bindgen-cs v0.9.0+v0.28.3
//     See https://github.com/NordSecurity/uniffi-bindgen-cs for more information.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;

namespace uniffi.matrix_sdk;

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

[StructLayout(LayoutKind.Sequential)]
internal struct RustBuffer
{
    public ulong capacity;
    public ulong len;
    public IntPtr data;

    public static RustBuffer Alloc(int size)
    {
        return _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                var buffer = _UniFFILib.ffi_matrix_sdk_rustbuffer_alloc(Convert.ToUInt64(size), ref status);
                if (buffer.data == IntPtr.Zero)
                {
                    throw new AllocationException($"RustBuffer.Alloc() returned null data pointer (size={size})");
                }
                return buffer;
            }
        );
    }

    public static void Free(RustBuffer buffer)
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.ffi_matrix_sdk_rustbuffer_free(buffer, ref status);
            }
        );
    }

    public static BigEndianStream MemoryStream(IntPtr data, long length)
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), length));
        }
    }

    public BigEndianStream AsStream()
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), Convert.ToInt64(len)));
        }
    }

    public BigEndianStream AsWriteableStream()
    {
        unsafe
        {
            return new BigEndianStream(
                new UnmanagedMemoryStream(
                    (byte*)data.ToPointer(),
                    Convert.ToInt64(capacity),
                    Convert.ToInt64(capacity),
                    FileAccess.Write
                )
            );
        }
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to managed memory, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

[StructLayout(LayoutKind.Sequential)]
internal struct ForeignBytes
{
    public int length;
    public IntPtr data;
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
internal abstract class FfiConverter<CsType, FfiType>
{
    // Convert an FFI type to a C# type
    public abstract CsType Lift(FfiType value);

    // Convert C# type to an FFI type
    public abstract FfiType Lower(CsType value);

    // Read a C# type from a `ByteBuffer`
    public abstract CsType Read(BigEndianStream stream);

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    public abstract int AllocationSize(CsType value);

    // Write a C# type to a `ByteBuffer`
    public abstract void Write(CsType value, BigEndianStream stream);

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    public RustBuffer LowerIntoRustBuffer(CsType value)
    {
        var rbuf = RustBuffer.Alloc(AllocationSize(value));
        try
        {
            var stream = rbuf.AsWriteableStream();
            Write(value, stream);
            rbuf.len = Convert.ToUInt64(stream.Position);
            return rbuf;
        }
        catch
        {
            RustBuffer.Free(rbuf);
            throw;
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    protected CsType LiftFromRustBuffer(RustBuffer rbuf)
    {
        var stream = rbuf.AsStream();
        try
        {
            var item = Read(stream);
            if (stream.HasRemaining())
            {
                throw new InternalException("junk remaining in buffer after lifting, something is very wrong!!");
            }
            return item;
        }
        finally
        {
            RustBuffer.Free(rbuf);
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
internal abstract class FfiConverterRustBuffer<CsType> : FfiConverter<CsType, RustBuffer>
{
    public override CsType Lift(RustBuffer value)
    {
        return LiftFromRustBuffer(value);
    }

    public override RustBuffer Lower(CsType value)
    {
        return LowerIntoRustBuffer(value);
    }
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
[StructLayout(LayoutKind.Sequential)]
struct UniffiRustCallStatus
{
    public sbyte code;
    public RustBuffer error_buf;

    public bool IsSuccess()
    {
        return code == 0;
    }

    public bool IsError()
    {
        return code == 1;
    }

    public bool IsPanic()
    {
        return code == 2;
    }
}

// Base class for all uniffi exceptions
internal class UniffiException : System.Exception
{
    public UniffiException()
        : base() { }

    public UniffiException(string message)
        : base(message) { }
}

internal class UndeclaredErrorException : UniffiException
{
    public UndeclaredErrorException(string message)
        : base(message) { }
}

internal class PanicException : UniffiException
{
    public PanicException(string message)
        : base(message) { }
}

internal class AllocationException : UniffiException
{
    public AllocationException(string message)
        : base(message) { }
}

internal class InternalException : UniffiException
{
    public InternalException(string message)
        : base(message) { }
}

internal class InvalidEnumException : InternalException
{
    public InvalidEnumException(string message)
        : base(message) { }
}

internal class UniffiContractVersionException : UniffiException
{
    public UniffiContractVersionException(string message)
        : base(message) { }
}

internal class UniffiContractChecksumException : UniffiException
{
    public UniffiContractChecksumException(string message)
        : base(message) { }
}

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E>
    where E : System.Exception
{
    E Lift(RustBuffer error_buf);
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
class NullCallStatusErrorHandler : CallStatusErrorHandler<UniffiException>
{
    public static NullCallStatusErrorHandler INSTANCE = new NullCallStatusErrorHandler();

    public UniffiException Lift(RustBuffer error_buf)
    {
        RustBuffer.Free(error_buf);
        return new UndeclaredErrorException("library has returned an error not declared in UNIFFI interface file");
    }
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
class _UniffiHelpers
{
    public delegate void RustCallAction(ref UniffiRustCallStatus status);
    public delegate U RustCallFunc<out U>(ref UniffiRustCallStatus status);

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static U RustCallWithError<U, E>(CallStatusErrorHandler<E> errorHandler, RustCallFunc<U> callback)
        where E : UniffiException
    {
        var status = new UniffiRustCallStatus();
        var return_value = callback(ref status);
        if (status.IsSuccess())
        {
            return return_value;
        }
        else if (status.IsError())
        {
            throw errorHandler.Lift(status.error_buf);
        }
        else if (status.IsPanic())
        {
            // when the rust code sees a panic, it tries to construct a rustbuffer
            // with the message.  but if that code panics, then it just sends back
            // an empty buffer.
            if (status.error_buf.len > 0)
            {
                throw new PanicException(FfiConverterString.INSTANCE.Lift(status.error_buf));
            }
            else
            {
                throw new PanicException("Rust panic");
            }
        }
        else
        {
            throw new InternalException($"Unknown rust call status: {status.code}");
        }
    }

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static void RustCallWithError<E>(CallStatusErrorHandler<E> errorHandler, RustCallAction callback)
        where E : UniffiException
    {
        _UniffiHelpers.RustCallWithError(
            errorHandler,
            (ref UniffiRustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }

    // Call a rust function that returns a plain value
    public static U RustCall<U>(RustCallFunc<U> callback)
    {
        return _UniffiHelpers.RustCallWithError(NullCallStatusErrorHandler.INSTANCE, callback);
    }

    // Call a rust function that returns a plain value
    public static void RustCall(RustCallAction callback)
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }
}

static class FFIObjectUtil
{
    public static void DisposeAll(params Object?[] list)
    {
        foreach (var obj in list)
        {
            Dispose(obj);
        }
    }

    // Dispose is implemented by recursive type inspection at runtime. This is because
    // generating correct Dispose calls for recursive complex types, e.g. List<List<int>>
    // is quite cumbersome.
    private static void Dispose(dynamic? obj)
    {
        if (obj == null)
        {
            return;
        }

        if (obj is IDisposable disposable)
        {
            disposable.Dispose();
            return;
        }

        var type = obj.GetType();
        if (type != null)
        {
            if (type.IsGenericType)
            {
                if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))
                {
                    foreach (var value in obj)
                    {
                        Dispose(value);
                    }
                }
                else if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(Dictionary<,>)))
                {
                    foreach (var value in obj.Values)
                    {
                        Dispose(value);
                    }
                }
            }
        }
    }
}

// Big endian streams are not yet available in dotnet :'(
// https://github.com/dotnet/runtime/issues/26904

class StreamUnderflowException : System.Exception
{
    public StreamUnderflowException() { }
}

class BigEndianStream
{
    Stream stream;

    public BigEndianStream(Stream stream)
    {
        this.stream = stream;
    }

    public bool HasRemaining()
    {
        return (stream.Length - stream.Position) > 0;
    }

    public long Position
    {
        get => stream.Position;
        set => stream.Position = value;
    }

    public void WriteBytes(byte[] value)
    {
        stream.Write(value, 0, value.Length);
    }

    public void WriteByte(byte value)
    {
        stream.WriteByte(value);
    }

    public void WriteUShort(ushort value)
    {
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteUInt(uint value)
    {
        stream.WriteByte((byte)(value >> 24));
        stream.WriteByte((byte)(value >> 16));
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteULong(ulong value)
    {
        WriteUInt((uint)(value >> 32));
        WriteUInt((uint)value);
    }

    public void WriteSByte(sbyte value)
    {
        stream.WriteByte((byte)value);
    }

    public void WriteShort(short value)
    {
        WriteUShort((ushort)value);
    }

    public void WriteInt(int value)
    {
        WriteUInt((uint)value);
    }

    public void WriteFloat(float value)
    {
        unsafe
        {
            WriteInt(*((int*)&value));
        }
    }

    public void WriteLong(long value)
    {
        WriteULong((ulong)value);
    }

    public void WriteDouble(double value)
    {
        WriteLong(BitConverter.DoubleToInt64Bits(value));
    }

    public byte[] ReadBytes(int length)
    {
        CheckRemaining(length);
        byte[] result = new byte[length];
        stream.Read(result, 0, length);
        return result;
    }

    public byte ReadByte()
    {
        CheckRemaining(1);
        return Convert.ToByte(stream.ReadByte());
    }

    public ushort ReadUShort()
    {
        CheckRemaining(2);
        return (ushort)(stream.ReadByte() << 8 | stream.ReadByte());
    }

    public uint ReadUInt()
    {
        CheckRemaining(4);
        return (uint)(stream.ReadByte() << 24 | stream.ReadByte() << 16 | stream.ReadByte() << 8 | stream.ReadByte());
    }

    public ulong ReadULong()
    {
        return (ulong)ReadUInt() << 32 | (ulong)ReadUInt();
    }

    public sbyte ReadSByte()
    {
        return (sbyte)ReadByte();
    }

    public short ReadShort()
    {
        return (short)ReadUShort();
    }

    public int ReadInt()
    {
        return (int)ReadUInt();
    }

    public float ReadFloat()
    {
        unsafe
        {
            int value = ReadInt();
            return *((float*)&value);
        }
    }

    public long ReadLong()
    {
        return (long)ReadULong();
    }

    public double ReadDouble()
    {
        return BitConverter.Int64BitsToDouble(ReadLong());
    }

    private void CheckRemaining(int length)
    {
        if (stream.Length - stream.Position < length)
        {
            throw new StreamUnderflowException();
        }
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.

// This is an implementation detail that will be called internally by the public API.
static class _UniFFILib
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiRustFutureContinuationCallback(ulong @data, sbyte @pollResult);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureFree(ulong @handle);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceFree(ulong @handle);

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFuture
    {
        public ulong @handle;
        public IntPtr @free;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU8
    {
        public byte @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU8(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU8 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI8
    {
        public sbyte @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI8(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI8 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU16
    {
        public ushort @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU16(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU16 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI16
    {
        public short @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI16(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI16 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU32
    {
        public uint @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI32
    {
        public int @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU64
    {
        public ulong @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI64
    {
        public long @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructF32
    {
        public float @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteF32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructF32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructF64
    {
        public double @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteF64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructF64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructPointer
    {
        public IntPtr @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompletePointer(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructPointer @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructRustBuffer
    {
        public RustBuffer @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteRustBuffer(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructRustBuffer @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructVoid
    {
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteVoid(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructVoid @result
    );

    static _UniFFILib()
    {
        _UniFFILib.uniffiCheckContractApiVersion();
        _UniFFILib.uniffiCheckApiChecksums();
    }

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr uniffi_matrix_sdk_fn_clone_oauthauthorizationdata(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void uniffi_matrix_sdk_fn_free_oauthauthorizationdata(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer uniffi_matrix_sdk_fn_method_oauthauthorizationdata_login_url(
        IntPtr @ptr,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_matrix_sdk_rustbuffer_alloc(
        ulong @size,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_matrix_sdk_rustbuffer_from_bytes(
        ForeignBytes @bytes,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rustbuffer_free(RustBuffer @buf, ref UniffiRustCallStatus _uniffi_out_err);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_matrix_sdk_rustbuffer_reserve(
        RustBuffer @buf,
        ulong @additional,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_u8(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_u8(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_u8(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern byte ffi_matrix_sdk_rust_future_complete_u8(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_i8(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_i8(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_i8(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte ffi_matrix_sdk_rust_future_complete_i8(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_u16(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_u16(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_u16(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort ffi_matrix_sdk_rust_future_complete_u16(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_i16(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_i16(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_i16(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern short ffi_matrix_sdk_rust_future_complete_i16(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_u32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_u32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_u32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint ffi_matrix_sdk_rust_future_complete_u32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_i32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_i32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_i32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ffi_matrix_sdk_rust_future_complete_i32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_u64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_u64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_u64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong ffi_matrix_sdk_rust_future_complete_u64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_i64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_i64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_i64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern long ffi_matrix_sdk_rust_future_complete_i64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_f32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_f32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_f32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern float ffi_matrix_sdk_rust_future_complete_f32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_f64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_f64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_f64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern double ffi_matrix_sdk_rust_future_complete_f64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_pointer(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_pointer(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_pointer(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr ffi_matrix_sdk_rust_future_complete_pointer(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_rust_buffer(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_rust_buffer(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_rust_buffer(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_matrix_sdk_rust_future_complete_rust_buffer(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_poll_void(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_cancel_void(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_free_void(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_rust_future_complete_void(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort uniffi_matrix_sdk_checksum_method_oauthauthorizationdata_login_url();

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint ffi_matrix_sdk_uniffi_contract_version();

    static void uniffiCheckContractApiVersion()
    {
        var scaffolding_contract_version = _UniFFILib.ffi_matrix_sdk_uniffi_contract_version();
        if (26 != scaffolding_contract_version)
        {
            throw new UniffiContractVersionException(
                $"uniffi.matrix_sdk: uniffi bindings expected version `26`, library returned `{scaffolding_contract_version}`"
            );
        }
    }

    static void uniffiCheckApiChecksums()
    {
        {
            var checksum = _UniFFILib.uniffi_matrix_sdk_checksum_method_oauthauthorizationdata_login_url();
            if (checksum != 25566)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.matrix_sdk: uniffi bindings expected function `uniffi_matrix_sdk_checksum_method_oauthauthorizationdata_login_url` checksum `25566`, library returned `{checksum}`"
                );
            }
        }
    }
}

// Public interface members begin here.

#pragma warning disable 8625

class FfiConverterInt64 : FfiConverter<long, long>
{
    public static FfiConverterInt64 INSTANCE = new FfiConverterInt64();

    public override long Lift(long value)
    {
        return value;
    }

    public override long Read(BigEndianStream stream)
    {
        return stream.ReadLong();
    }

    public override long Lower(long value)
    {
        return value;
    }

    public override int AllocationSize(long value)
    {
        return 8;
    }

    public override void Write(long value, BigEndianStream stream)
    {
        stream.WriteLong(value);
    }
}

class FfiConverterBoolean : FfiConverter<bool, sbyte>
{
    public static FfiConverterBoolean INSTANCE = new FfiConverterBoolean();

    public override bool Lift(sbyte value)
    {
        return value != 0;
    }

    public override bool Read(BigEndianStream stream)
    {
        return Lift(stream.ReadSByte());
    }

    public override sbyte Lower(bool value)
    {
        return value ? (sbyte)1 : (sbyte)0;
    }

    public override int AllocationSize(bool value)
    {
        return (sbyte)1;
    }

    public override void Write(bool value, BigEndianStream stream)
    {
        stream.WriteSByte(Lower(value));
    }
}

class FfiConverterString : FfiConverter<string, RustBuffer>
{
    public static FfiConverterString INSTANCE = new FfiConverterString();

    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    public override string Lift(RustBuffer value)
    {
        try
        {
            var bytes = value.AsStream().ReadBytes(Convert.ToInt32(value.len));
            return System.Text.Encoding.UTF8.GetString(bytes);
        }
        finally
        {
            RustBuffer.Free(value);
        }
    }

    public override string Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var bytes = stream.ReadBytes(length);
        return System.Text.Encoding.UTF8.GetString(bytes);
    }

    public override RustBuffer Lower(string value)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        var rbuf = RustBuffer.Alloc(bytes.Length);
        rbuf.AsWriteableStream().WriteBytes(bytes);
        return rbuf;
    }

    // TODO(CS)
    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    public override int AllocationSize(string value)
    {
        const int sizeForLength = 4;
        var sizeForString = System.Text.Encoding.UTF8.GetByteCount(value);
        return sizeForLength + sizeForString;
    }

    public override void Write(string value, BigEndianStream stream)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        stream.WriteInt(bytes.Length);
        stream.WriteBytes(bytes);
    }
}

/// <summary>
/// The data needed to perform authorization using OAuth 2.0.
/// </summary>
internal interface IOAuthAuthorizationData
{
    /// <summary>
    /// The login URL to use for authorization.
    /// </summary>
    string LoginUrl();
}

/// <summary>
/// The data needed to perform authorization using OAuth 2.0.
/// </summary>
internal class OAuthAuthorizationData : IOAuthAuthorizationData, IDisposable
{
    protected IntPtr pointer;
    private int _wasDestroyed = 0;
    private long _callCounter = 1;

    public OAuthAuthorizationData(IntPtr pointer)
    {
        this.pointer = pointer;
    }

    ~OAuthAuthorizationData()
    {
        Destroy();
    }

    protected void FreeRustArcPtr()
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.uniffi_matrix_sdk_fn_free_oauthauthorizationdata(this.pointer, ref status);
            }
        );
    }

    protected IntPtr CloneRustArcPtr()
    {
        return _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                return _UniFFILib.uniffi_matrix_sdk_fn_clone_oauthauthorizationdata(this.pointer, ref status);
            }
        );
    }

    public void Destroy()
    {
        // Only allow a single call to this method.
        if (Interlocked.CompareExchange(ref _wasDestroyed, 1, 0) == 0)
        {
            // This decrement always matches the initial count of 1 given at creation time.
            if (Interlocked.Decrement(ref _callCounter) == 0)
            {
                FreeRustArcPtr();
            }
        }
    }

    public void Dispose()
    {
        Destroy();
        GC.SuppressFinalize(this); // Suppress finalization to avoid unnecessary GC overhead.
    }

    private void IncrementCallCounter()
    {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        long count;
        do
        {
            count = Interlocked.Read(ref _callCounter);
            if (count == 0L)
                throw new System.ObjectDisposedException(
                    String.Format("'{0}' object has already been destroyed", this.GetType().Name)
                );
            if (count == long.MaxValue)
                throw new System.OverflowException(
                    String.Format("'{0}' call counter would overflow", this.GetType().Name)
                );
        } while (Interlocked.CompareExchange(ref _callCounter, count + 1, count) != count);
    }

    private void DecrementCallCounter()
    {
        // This decrement always matches the increment we performed above.
        if (Interlocked.Decrement(ref _callCounter) == 0)
        {
            FreeRustArcPtr();
        }
    }

    internal void CallWithPointer(Action<IntPtr> action)
    {
        IncrementCallCounter();
        try
        {
            action(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    internal T CallWithPointer<T>(Func<IntPtr, T> func)
    {
        IncrementCallCounter();
        try
        {
            return func(CloneRustArcPtr());
        }
        finally
        {
            DecrementCallCounter();
        }
    }

    /// <summary>
    /// The login URL to use for authorization.
    /// </summary>
    public string LoginUrl()
    {
        return CallWithPointer(thisPtr =>
            FfiConverterString.INSTANCE.Lift(
                _UniffiHelpers.RustCall(
                    (ref UniffiRustCallStatus _status) =>
                        _UniFFILib.uniffi_matrix_sdk_fn_method_oauthauthorizationdata_login_url(thisPtr, ref _status)
                )
            )
        );
    }
}

class FfiConverterTypeOAuthAuthorizationData : FfiConverter<OAuthAuthorizationData, IntPtr>
{
    public static FfiConverterTypeOAuthAuthorizationData INSTANCE = new FfiConverterTypeOAuthAuthorizationData();

    public override IntPtr Lower(OAuthAuthorizationData value)
    {
        return value.CallWithPointer(thisPtr => thisPtr);
    }

    public override OAuthAuthorizationData Lift(IntPtr value)
    {
        return new OAuthAuthorizationData(value);
    }

    public override OAuthAuthorizationData Read(BigEndianStream stream)
    {
        return Lift(new IntPtr(stream.ReadLong()));
    }

    public override int AllocationSize(OAuthAuthorizationData value)
    {
        return 8;
    }

    public override void Write(OAuthAuthorizationData value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).ToInt64());
    }
}

/// <summary>
/// A set of common power levels required for various operations within a room,
/// that can be applied as a single operation. When updating these
/// settings, any levels that are `None` will remain unchanged.
/// </summary>
/// <param name="ban">
/// The level required to ban a user.
/// </param>
/// <param name="invite">
/// The level required to invite a user.
/// </param>
/// <param name="kick">
/// The level required to kick a user.
/// </param>
/// <param name="redact">
/// The level required to redact an event.
/// </param>
/// <param name="events_default">
/// The default level required to send message events.
/// </param>
/// <param name="state_default">
/// The default level required to send state events.
/// </param>
/// <param name="users_default">
/// The default power level for every user in the room.
/// </param>
/// <param name="room_name">
/// The level required to change the room's name.
/// </param>
/// <param name="room_avatar">
/// The level required to change the room's avatar.
/// </param>
/// <param name="room_topic">
/// The level required to change the room's topic.
/// </param>
internal record RoomPowerLevelChanges(
    /// <summary>
    /// The level required to ban a user.
    /// </summary>
    long? @ban = null,
    /// <summary>
    /// The level required to invite a user.
    /// </summary>
    long? @invite = null,
    /// <summary>
    /// The level required to kick a user.
    /// </summary>
    long? @kick = null,
    /// <summary>
    /// The level required to redact an event.
    /// </summary>
    long? @redact = null,
    /// <summary>
    /// The default level required to send message events.
    /// </summary>
    long? @eventsDefault = null,
    /// <summary>
    /// The default level required to send state events.
    /// </summary>
    long? @stateDefault = null,
    /// <summary>
    /// The default power level for every user in the room.
    /// </summary>
    long? @usersDefault = null,
    /// <summary>
    /// The level required to change the room's name.
    /// </summary>
    long? @roomName = null,
    /// <summary>
    /// The level required to change the room's avatar.
    /// </summary>
    long? @roomAvatar = null,
    /// <summary>
    /// The level required to change the room's topic.
    /// </summary>
    long? @roomTopic = null
) { }

class FfiConverterTypeRoomPowerLevelChanges : FfiConverterRustBuffer<RoomPowerLevelChanges>
{
    public static FfiConverterTypeRoomPowerLevelChanges INSTANCE = new FfiConverterTypeRoomPowerLevelChanges();

    public override RoomPowerLevelChanges Read(BigEndianStream stream)
    {
        return new RoomPowerLevelChanges(
            @ban: FfiConverterOptionalInt64.INSTANCE.Read(stream),
            @invite: FfiConverterOptionalInt64.INSTANCE.Read(stream),
            @kick: FfiConverterOptionalInt64.INSTANCE.Read(stream),
            @redact: FfiConverterOptionalInt64.INSTANCE.Read(stream),
            @eventsDefault: FfiConverterOptionalInt64.INSTANCE.Read(stream),
            @stateDefault: FfiConverterOptionalInt64.INSTANCE.Read(stream),
            @usersDefault: FfiConverterOptionalInt64.INSTANCE.Read(stream),
            @roomName: FfiConverterOptionalInt64.INSTANCE.Read(stream),
            @roomAvatar: FfiConverterOptionalInt64.INSTANCE.Read(stream),
            @roomTopic: FfiConverterOptionalInt64.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(RoomPowerLevelChanges value)
    {
        return 0
            + FfiConverterOptionalInt64.INSTANCE.AllocationSize(value.@ban)
            + FfiConverterOptionalInt64.INSTANCE.AllocationSize(value.@invite)
            + FfiConverterOptionalInt64.INSTANCE.AllocationSize(value.@kick)
            + FfiConverterOptionalInt64.INSTANCE.AllocationSize(value.@redact)
            + FfiConverterOptionalInt64.INSTANCE.AllocationSize(value.@eventsDefault)
            + FfiConverterOptionalInt64.INSTANCE.AllocationSize(value.@stateDefault)
            + FfiConverterOptionalInt64.INSTANCE.AllocationSize(value.@usersDefault)
            + FfiConverterOptionalInt64.INSTANCE.AllocationSize(value.@roomName)
            + FfiConverterOptionalInt64.INSTANCE.AllocationSize(value.@roomAvatar)
            + FfiConverterOptionalInt64.INSTANCE.AllocationSize(value.@roomTopic);
    }

    public override void Write(RoomPowerLevelChanges value, BigEndianStream stream)
    {
        FfiConverterOptionalInt64.INSTANCE.Write(value.@ban, stream);
        FfiConverterOptionalInt64.INSTANCE.Write(value.@invite, stream);
        FfiConverterOptionalInt64.INSTANCE.Write(value.@kick, stream);
        FfiConverterOptionalInt64.INSTANCE.Write(value.@redact, stream);
        FfiConverterOptionalInt64.INSTANCE.Write(value.@eventsDefault, stream);
        FfiConverterOptionalInt64.INSTANCE.Write(value.@stateDefault, stream);
        FfiConverterOptionalInt64.INSTANCE.Write(value.@usersDefault, stream);
        FfiConverterOptionalInt64.INSTANCE.Write(value.@roomName, stream);
        FfiConverterOptionalInt64.INSTANCE.Write(value.@roomAvatar, stream);
        FfiConverterOptionalInt64.INSTANCE.Write(value.@roomTopic, stream);
    }
}

/// <summary>
/// Settings for end-to-end encryption features.
/// </summary>
internal enum BackupDownloadStrategy : int
{
    /// <summary>
    /// Automatically download all room keys from the backup when the backup
    /// recovery key has been received. The backup recovery key can be received
    /// in two ways:
    ///
    /// 1. Received as a `m.secret.send` to-device event, after a successful
    /// interactive verification.
    /// 2. Imported from secret storage (4S) using the
    /// [`SecretStore::import_secrets()`] method.
    ///
    /// [`SecretStore::import_secrets()`]: crate::encryption::secret_storage::SecretStore::import_secrets
    /// </summary>
    OneShot,

    /// <summary>
    /// Attempt to download a single room key if an event fails to be decrypted.
    /// </summary>
    AfterDecryptionFailure,

    /// <summary>
    /// Don't download any room keys automatically. The user can manually
    /// download room keys using the [`Backups::download_room_key()`] methods.
    ///
    /// This is the default option.
    /// </summary>
    Manual,
}

class FfiConverterTypeBackupDownloadStrategy : FfiConverterRustBuffer<BackupDownloadStrategy>
{
    public static FfiConverterTypeBackupDownloadStrategy INSTANCE = new FfiConverterTypeBackupDownloadStrategy();

    public override BackupDownloadStrategy Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(BackupDownloadStrategy), value))
        {
            return (BackupDownloadStrategy)value;
        }
        else
        {
            throw new InternalException(
                String.Format("invalid enum value '{0}' in FfiConverterTypeBackupDownloadStrategy.Read()", value)
            );
        }
    }

    public override int AllocationSize(BackupDownloadStrategy value)
    {
        return 4;
    }

    public override void Write(BackupDownloadStrategy value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

/// <summary>
/// Current state of a [`Paginator`].
/// </summary>
internal enum PaginatorState : int
{
    /// <summary>
    /// The initial state of the paginator.
    /// </summary>
    Initial,

    /// <summary>
    /// The paginator is fetching the target initial event.
    /// </summary>
    FetchingTargetEvent,

    /// <summary>
    /// The target initial event could be found, zero or more paginations have
    /// happened since then, and the paginator is at rest now.
    /// </summary>
    Idle,

    /// <summary>
    /// The paginator is… paginating one direction or another.
    /// </summary>
    Paginating,
}

class FfiConverterTypePaginatorState : FfiConverterRustBuffer<PaginatorState>
{
    public static FfiConverterTypePaginatorState INSTANCE = new FfiConverterTypePaginatorState();

    public override PaginatorState Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(PaginatorState), value))
        {
            return (PaginatorState)value;
        }
        else
        {
            throw new InternalException(
                String.Format("invalid enum value '{0}' in FfiConverterTypePaginatorState.Read()", value)
            );
        }
    }

    public override int AllocationSize(PaginatorState value)
    {
        return 4;
    }

    public override void Write(PaginatorState value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

/// <summary>
/// The error type for failures while trying to log in a new device using a QR
/// code.
/// </summary>
internal class QrCodeLoginException : UniffiException
{
    QrCodeLoginException(string message)
        : base(message) { }

    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.

    /// <summary>
    /// An error happened while we were communicating with the OAuth 2.0
    /// authorization server.
    /// </summary>
    public class OAuth : QrCodeLoginException
    {
        public OAuth(string message)
            : base(message) { }
    }

    /// <summary>
    /// The other device has signaled to us that the login has failed.
    /// </summary>
    public class LoginFailure : QrCodeLoginException
    {
        public LoginFailure(string message)
            : base(message) { }
    }

    /// <summary>
    /// An unexpected message was received from the other device.
    /// </summary>
    public class UnexpectedMessage : QrCodeLoginException
    {
        public UnexpectedMessage(string message)
            : base(message) { }
    }

    /// <summary>
    /// An error happened while exchanging messages with the other device.
    /// </summary>
    public class SecureChannel : QrCodeLoginException
    {
        public SecureChannel(string message)
            : base(message) { }
    }

    /// <summary>
    /// The cross-process refresh lock failed to be initialized.
    /// </summary>
    public class CrossProcessRefreshLock : QrCodeLoginException
    {
        public CrossProcessRefreshLock(string message)
            : base(message) { }
    }

    /// <summary>
    /// An error happened while we were trying to discover our user and device
    /// ID, after we have acquired an access token from the OAuth 2.0
    /// authorization server.
    /// </summary>
    public class UserIdDiscovery : QrCodeLoginException
    {
        public UserIdDiscovery(string message)
            : base(message) { }
    }

    /// <summary>
    /// We failed to set the session tokens after we figured out our device and
    /// user IDs.
    /// </summary>
    public class SessionTokens : QrCodeLoginException
    {
        public SessionTokens(string message)
            : base(message) { }
    }

    /// <summary>
    /// The device keys failed to be uploaded after we successfully logged in.
    /// </summary>
    public class DeviceKeyUpload : QrCodeLoginException
    {
        public DeviceKeyUpload(string message)
            : base(message) { }
    }

    /// <summary>
    /// The secrets bundle we received from the existing device failed to be
    /// imported.
    /// </summary>
    public class SecretImport : QrCodeLoginException
    {
        public SecretImport(string message)
            : base(message) { }
    }
}

class FfiConverterTypeQRCodeLoginError
    : FfiConverterRustBuffer<QrCodeLoginException>,
        CallStatusErrorHandler<QrCodeLoginException>
{
    public static FfiConverterTypeQRCodeLoginError INSTANCE = new FfiConverterTypeQRCodeLoginError();

    public override QrCodeLoginException Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new QrCodeLoginException.OAuth(FfiConverterString.INSTANCE.Read(stream));
            case 2:
                return new QrCodeLoginException.LoginFailure(FfiConverterString.INSTANCE.Read(stream));
            case 3:
                return new QrCodeLoginException.UnexpectedMessage(FfiConverterString.INSTANCE.Read(stream));
            case 4:
                return new QrCodeLoginException.SecureChannel(FfiConverterString.INSTANCE.Read(stream));
            case 5:
                return new QrCodeLoginException.CrossProcessRefreshLock(FfiConverterString.INSTANCE.Read(stream));
            case 6:
                return new QrCodeLoginException.UserIdDiscovery(FfiConverterString.INSTANCE.Read(stream));
            case 7:
                return new QrCodeLoginException.SessionTokens(FfiConverterString.INSTANCE.Read(stream));
            case 8:
                return new QrCodeLoginException.DeviceKeyUpload(FfiConverterString.INSTANCE.Read(stream));
            case 9:
                return new QrCodeLoginException.SecretImport(FfiConverterString.INSTANCE.Read(stream));
            default:
                throw new InternalException(
                    String.Format("invalid error value '{0}' in FfiConverterTypeQRCodeLoginError.Read()", value)
                );
        }
    }

    public override int AllocationSize(QrCodeLoginException value)
    {
        return 4 + FfiConverterString.INSTANCE.AllocationSize(value.Message);
    }

    public override void Write(QrCodeLoginException value, BigEndianStream stream)
    {
        switch (value)
        {
            case QrCodeLoginException.OAuth:
                stream.WriteInt(1);
                break;
            case QrCodeLoginException.LoginFailure:
                stream.WriteInt(2);
                break;
            case QrCodeLoginException.UnexpectedMessage:
                stream.WriteInt(3);
                break;
            case QrCodeLoginException.SecureChannel:
                stream.WriteInt(4);
                break;
            case QrCodeLoginException.CrossProcessRefreshLock:
                stream.WriteInt(5);
                break;
            case QrCodeLoginException.UserIdDiscovery:
                stream.WriteInt(6);
                break;
            case QrCodeLoginException.SessionTokens:
                stream.WriteInt(7);
                break;
            case QrCodeLoginException.DeviceKeyUpload:
                stream.WriteInt(8);
                break;
            case QrCodeLoginException.SecretImport:
                stream.WriteInt(9);
                break;
            default:
                throw new InternalException(
                    String.Format("invalid error value '{0}' in FfiConverterTypeQRCodeLoginError.Write()", value)
                );
        }
    }
}

/// <summary>
/// The role of a member in a room.
/// </summary>
internal enum RoomMemberRole : int
{
    /// <summary>
    /// The member is an administrator.
    /// </summary>
    Administrator,

    /// <summary>
    /// The member is a moderator.
    /// </summary>
    Moderator,

    /// <summary>
    /// The member is a regular user.
    /// </summary>
    User,
}

class FfiConverterTypeRoomMemberRole : FfiConverterRustBuffer<RoomMemberRole>
{
    public static FfiConverterTypeRoomMemberRole INSTANCE = new FfiConverterTypeRoomMemberRole();

    public override RoomMemberRole Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(RoomMemberRole), value))
        {
            return (RoomMemberRole)value;
        }
        else
        {
            throw new InternalException(
                String.Format("invalid enum value '{0}' in FfiConverterTypeRoomMemberRole.Read()", value)
            );
        }
    }

    public override int AllocationSize(RoomMemberRole value)
    {
        return 4;
    }

    public override void Write(RoomMemberRole value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

/// <summary>
/// Status for the back-pagination on a room event cache.
/// </summary>
internal record RoomPaginationStatus
{
    /// <summary>
    /// No back-pagination is happening right now.
    /// </summary>
    public record Idle(bool @hitTimelineStart) : RoomPaginationStatus { }

    /// <summary>
    /// Back-pagination is already running in the background.
    /// </summary>
    public record Paginating : RoomPaginationStatus { }
}

class FfiConverterTypeRoomPaginationStatus : FfiConverterRustBuffer<RoomPaginationStatus>
{
    public static FfiConverterRustBuffer<RoomPaginationStatus> INSTANCE = new FfiConverterTypeRoomPaginationStatus();

    public override RoomPaginationStatus Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new RoomPaginationStatus.Idle(FfiConverterBoolean.INSTANCE.Read(stream));
            case 2:
                return new RoomPaginationStatus.Paginating();
            default:
                throw new InternalException(
                    String.Format("invalid enum value '{0}' in FfiConverterTypeRoomPaginationStatus.Read()", value)
                );
        }
    }

    public override int AllocationSize(RoomPaginationStatus value)
    {
        switch (value)
        {
            case RoomPaginationStatus.Idle variant_value:
                return 4 + FfiConverterBoolean.INSTANCE.AllocationSize(variant_value.@hitTimelineStart);
            case RoomPaginationStatus.Paginating variant_value:
                return 4;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid enum value '{0}' in FfiConverterTypeRoomPaginationStatus.AllocationSize()",
                        value
                    )
                );
        }
    }

    public override void Write(RoomPaginationStatus value, BigEndianStream stream)
    {
        switch (value)
        {
            case RoomPaginationStatus.Idle variant_value:
                stream.WriteInt(1);
                FfiConverterBoolean.INSTANCE.Write(variant_value.@hitTimelineStart, stream);
                break;
            case RoomPaginationStatus.Paginating variant_value:
                stream.WriteInt(2);
                break;
            default:
                throw new InternalException(
                    String.Format("invalid enum value '{0}' in FfiConverterTypeRoomPaginationStatus.Write()", value)
                );
        }
    }
}

class FfiConverterOptionalInt64 : FfiConverterRustBuffer<long?>
{
    public static FfiConverterOptionalInt64 INSTANCE = new FfiConverterOptionalInt64();

    public override long? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterInt64.INSTANCE.Read(stream);
    }

    public override int AllocationSize(long? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterInt64.INSTANCE.AllocationSize((long)value);
        }
    }

    public override void Write(long? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterInt64.INSTANCE.Write((long)value, stream);
        }
    }
}
#pragma warning restore 8625
internal static class MatrixSdkMethods { }
