// <auto-generated>
//     This file was generated by uniffi-bindgen-cs v0.9.0+v0.28.3
//     See https://github.com/NordSecurity/uniffi-bindgen-cs for more information.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;

namespace uniffi.matrix_sdk_base;

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

[StructLayout(LayoutKind.Sequential)]
internal struct RustBuffer
{
    public ulong capacity;
    public ulong len;
    public IntPtr data;

    public static RustBuffer Alloc(int size)
    {
        return _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                var buffer = _UniFFILib.ffi_matrix_sdk_base_rustbuffer_alloc(Convert.ToUInt64(size), ref status);
                if (buffer.data == IntPtr.Zero)
                {
                    throw new AllocationException($"RustBuffer.Alloc() returned null data pointer (size={size})");
                }
                return buffer;
            }
        );
    }

    public static void Free(RustBuffer buffer)
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                _UniFFILib.ffi_matrix_sdk_base_rustbuffer_free(buffer, ref status);
            }
        );
    }

    public static BigEndianStream MemoryStream(IntPtr data, long length)
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), length));
        }
    }

    public BigEndianStream AsStream()
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), Convert.ToInt64(len)));
        }
    }

    public BigEndianStream AsWriteableStream()
    {
        unsafe
        {
            return new BigEndianStream(
                new UnmanagedMemoryStream(
                    (byte*)data.ToPointer(),
                    Convert.ToInt64(capacity),
                    Convert.ToInt64(capacity),
                    FileAccess.Write
                )
            );
        }
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to managed memory, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

[StructLayout(LayoutKind.Sequential)]
internal struct ForeignBytes
{
    public int length;
    public IntPtr data;
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
internal abstract class FfiConverter<CsType, FfiType>
{
    // Convert an FFI type to a C# type
    public abstract CsType Lift(FfiType value);

    // Convert C# type to an FFI type
    public abstract FfiType Lower(CsType value);

    // Read a C# type from a `ByteBuffer`
    public abstract CsType Read(BigEndianStream stream);

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    public abstract int AllocationSize(CsType value);

    // Write a C# type to a `ByteBuffer`
    public abstract void Write(CsType value, BigEndianStream stream);

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    public RustBuffer LowerIntoRustBuffer(CsType value)
    {
        var rbuf = RustBuffer.Alloc(AllocationSize(value));
        try
        {
            var stream = rbuf.AsWriteableStream();
            Write(value, stream);
            rbuf.len = Convert.ToUInt64(stream.Position);
            return rbuf;
        }
        catch
        {
            RustBuffer.Free(rbuf);
            throw;
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    protected CsType LiftFromRustBuffer(RustBuffer rbuf)
    {
        var stream = rbuf.AsStream();
        try
        {
            var item = Read(stream);
            if (stream.HasRemaining())
            {
                throw new InternalException("junk remaining in buffer after lifting, something is very wrong!!");
            }
            return item;
        }
        finally
        {
            RustBuffer.Free(rbuf);
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
internal abstract class FfiConverterRustBuffer<CsType> : FfiConverter<CsType, RustBuffer>
{
    public override CsType Lift(RustBuffer value)
    {
        return LiftFromRustBuffer(value);
    }

    public override RustBuffer Lower(CsType value)
    {
        return LowerIntoRustBuffer(value);
    }
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
[StructLayout(LayoutKind.Sequential)]
struct UniffiRustCallStatus
{
    public sbyte code;
    public RustBuffer error_buf;

    public bool IsSuccess()
    {
        return code == 0;
    }

    public bool IsError()
    {
        return code == 1;
    }

    public bool IsPanic()
    {
        return code == 2;
    }
}

// Base class for all uniffi exceptions
internal class UniffiException : System.Exception
{
    public UniffiException()
        : base() { }

    public UniffiException(string message)
        : base(message) { }
}

internal class UndeclaredErrorException : UniffiException
{
    public UndeclaredErrorException(string message)
        : base(message) { }
}

internal class PanicException : UniffiException
{
    public PanicException(string message)
        : base(message) { }
}

internal class AllocationException : UniffiException
{
    public AllocationException(string message)
        : base(message) { }
}

internal class InternalException : UniffiException
{
    public InternalException(string message)
        : base(message) { }
}

internal class InvalidEnumException : InternalException
{
    public InvalidEnumException(string message)
        : base(message) { }
}

internal class UniffiContractVersionException : UniffiException
{
    public UniffiContractVersionException(string message)
        : base(message) { }
}

internal class UniffiContractChecksumException : UniffiException
{
    public UniffiContractChecksumException(string message)
        : base(message) { }
}

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E>
    where E : System.Exception
{
    E Lift(RustBuffer error_buf);
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
class NullCallStatusErrorHandler : CallStatusErrorHandler<UniffiException>
{
    public static NullCallStatusErrorHandler INSTANCE = new NullCallStatusErrorHandler();

    public UniffiException Lift(RustBuffer error_buf)
    {
        RustBuffer.Free(error_buf);
        return new UndeclaredErrorException("library has returned an error not declared in UNIFFI interface file");
    }
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
class _UniffiHelpers
{
    public delegate void RustCallAction(ref UniffiRustCallStatus status);
    public delegate U RustCallFunc<out U>(ref UniffiRustCallStatus status);

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static U RustCallWithError<U, E>(CallStatusErrorHandler<E> errorHandler, RustCallFunc<U> callback)
        where E : UniffiException
    {
        var status = new UniffiRustCallStatus();
        var return_value = callback(ref status);
        if (status.IsSuccess())
        {
            return return_value;
        }
        else if (status.IsError())
        {
            throw errorHandler.Lift(status.error_buf);
        }
        else if (status.IsPanic())
        {
            // when the rust code sees a panic, it tries to construct a rustbuffer
            // with the message.  but if that code panics, then it just sends back
            // an empty buffer.
            if (status.error_buf.len > 0)
            {
                throw new PanicException(FfiConverterString.INSTANCE.Lift(status.error_buf));
            }
            else
            {
                throw new PanicException("Rust panic");
            }
        }
        else
        {
            throw new InternalException($"Unknown rust call status: {status.code}");
        }
    }

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static void RustCallWithError<E>(CallStatusErrorHandler<E> errorHandler, RustCallAction callback)
        where E : UniffiException
    {
        _UniffiHelpers.RustCallWithError(
            errorHandler,
            (ref UniffiRustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }

    // Call a rust function that returns a plain value
    public static U RustCall<U>(RustCallFunc<U> callback)
    {
        return _UniffiHelpers.RustCallWithError(NullCallStatusErrorHandler.INSTANCE, callback);
    }

    // Call a rust function that returns a plain value
    public static void RustCall(RustCallAction callback)
    {
        _UniffiHelpers.RustCall(
            (ref UniffiRustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }
}

static class FFIObjectUtil
{
    public static void DisposeAll(params Object?[] list)
    {
        foreach (var obj in list)
        {
            Dispose(obj);
        }
    }

    // Dispose is implemented by recursive type inspection at runtime. This is because
    // generating correct Dispose calls for recursive complex types, e.g. List<List<int>>
    // is quite cumbersome.
    private static void Dispose(dynamic? obj)
    {
        if (obj == null)
        {
            return;
        }

        if (obj is IDisposable disposable)
        {
            disposable.Dispose();
            return;
        }

        var type = obj.GetType();
        if (type != null)
        {
            if (type.IsGenericType)
            {
                if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))
                {
                    foreach (var value in obj)
                    {
                        Dispose(value);
                    }
                }
                else if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(Dictionary<,>)))
                {
                    foreach (var value in obj.Values)
                    {
                        Dispose(value);
                    }
                }
            }
        }
    }
}

// Big endian streams are not yet available in dotnet :'(
// https://github.com/dotnet/runtime/issues/26904

class StreamUnderflowException : System.Exception
{
    public StreamUnderflowException() { }
}

class BigEndianStream
{
    Stream stream;

    public BigEndianStream(Stream stream)
    {
        this.stream = stream;
    }

    public bool HasRemaining()
    {
        return (stream.Length - stream.Position) > 0;
    }

    public long Position
    {
        get => stream.Position;
        set => stream.Position = value;
    }

    public void WriteBytes(byte[] value)
    {
        stream.Write(value, 0, value.Length);
    }

    public void WriteByte(byte value)
    {
        stream.WriteByte(value);
    }

    public void WriteUShort(ushort value)
    {
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteUInt(uint value)
    {
        stream.WriteByte((byte)(value >> 24));
        stream.WriteByte((byte)(value >> 16));
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteULong(ulong value)
    {
        WriteUInt((uint)(value >> 32));
        WriteUInt((uint)value);
    }

    public void WriteSByte(sbyte value)
    {
        stream.WriteByte((byte)value);
    }

    public void WriteShort(short value)
    {
        WriteUShort((ushort)value);
    }

    public void WriteInt(int value)
    {
        WriteUInt((uint)value);
    }

    public void WriteFloat(float value)
    {
        unsafe
        {
            WriteInt(*((int*)&value));
        }
    }

    public void WriteLong(long value)
    {
        WriteULong((ulong)value);
    }

    public void WriteDouble(double value)
    {
        WriteLong(BitConverter.DoubleToInt64Bits(value));
    }

    public byte[] ReadBytes(int length)
    {
        CheckRemaining(length);
        byte[] result = new byte[length];
        stream.Read(result, 0, length);
        return result;
    }

    public byte ReadByte()
    {
        CheckRemaining(1);
        return Convert.ToByte(stream.ReadByte());
    }

    public ushort ReadUShort()
    {
        CheckRemaining(2);
        return (ushort)(stream.ReadByte() << 8 | stream.ReadByte());
    }

    public uint ReadUInt()
    {
        CheckRemaining(4);
        return (uint)(stream.ReadByte() << 24 | stream.ReadByte() << 16 | stream.ReadByte() << 8 | stream.ReadByte());
    }

    public ulong ReadULong()
    {
        return (ulong)ReadUInt() << 32 | (ulong)ReadUInt();
    }

    public sbyte ReadSByte()
    {
        return (sbyte)ReadByte();
    }

    public short ReadShort()
    {
        return (short)ReadUShort();
    }

    public int ReadInt()
    {
        return (int)ReadUInt();
    }

    public float ReadFloat()
    {
        unsafe
        {
            int value = ReadInt();
            return *((float*)&value);
        }
    }

    public long ReadLong()
    {
        return (long)ReadULong();
    }

    public double ReadDouble()
    {
        return BitConverter.Int64BitsToDouble(ReadLong());
    }

    private void CheckRemaining(int length)
    {
        if (stream.Length - stream.Position < length)
        {
            throw new StreamUnderflowException();
        }
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.

// This is an implementation detail that will be called internally by the public API.
static class _UniFFILib
{
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiRustFutureContinuationCallback(ulong @data, sbyte @pollResult);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureFree(ulong @handle);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiCallbackInterfaceFree(ulong @handle);

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFuture
    {
        public ulong @handle;
        public IntPtr @free;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU8
    {
        public byte @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU8(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU8 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI8
    {
        public sbyte @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI8(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI8 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU16
    {
        public ushort @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU16(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU16 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI16
    {
        public short @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI16(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI16 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU32
    {
        public uint @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI32
    {
        public int @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructU64
    {
        public ulong @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteU64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructU64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructI64
    {
        public long @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteI64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructI64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructF32
    {
        public float @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteF32(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructF32 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructF64
    {
        public double @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteF64(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructF64 @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructPointer
    {
        public IntPtr @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompletePointer(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructPointer @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructRustBuffer
    {
        public RustBuffer @returnValue;
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteRustBuffer(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructRustBuffer @result
    );

    [StructLayout(LayoutKind.Sequential)]
    public struct UniffiForeignFutureStructVoid
    {
        public UniffiRustCallStatus @callStatus;
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void UniffiForeignFutureCompleteVoid(
        ulong @callbackData,
        _UniFFILib.UniffiForeignFutureStructVoid @result
    );

    static _UniFFILib()
    {
        _UniFFILib.uniffiCheckContractApiVersion();
        _UniFFILib.uniffiCheckApiChecksums();
    }

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_matrix_sdk_base_rustbuffer_alloc(
        ulong @size,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_matrix_sdk_base_rustbuffer_from_bytes(
        ForeignBytes @bytes,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rustbuffer_free(
        RustBuffer @buf,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_matrix_sdk_base_rustbuffer_reserve(
        RustBuffer @buf,
        ulong @additional,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_u8(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_u8(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_u8(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern byte ffi_matrix_sdk_base_rust_future_complete_u8(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_i8(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_i8(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_i8(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern sbyte ffi_matrix_sdk_base_rust_future_complete_i8(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_u16(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_u16(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_u16(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern ushort ffi_matrix_sdk_base_rust_future_complete_u16(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_i16(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_i16(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_i16(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern short ffi_matrix_sdk_base_rust_future_complete_i16(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_u32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_u32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_u32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint ffi_matrix_sdk_base_rust_future_complete_u32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_i32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_i32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_i32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern int ffi_matrix_sdk_base_rust_future_complete_i32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_u64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_u64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_u64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong ffi_matrix_sdk_base_rust_future_complete_u64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_i64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_i64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_i64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern long ffi_matrix_sdk_base_rust_future_complete_i64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_f32(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_f32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_f32(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern float ffi_matrix_sdk_base_rust_future_complete_f32(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_f64(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_f64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_f64(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern double ffi_matrix_sdk_base_rust_future_complete_f64(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_pointer(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_pointer(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_pointer(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr ffi_matrix_sdk_base_rust_future_complete_pointer(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_rust_buffer(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_rust_buffer(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_rust_buffer(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern RustBuffer ffi_matrix_sdk_base_rust_future_complete_rust_buffer(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_poll_void(
        IntPtr @handle,
        IntPtr @callback,
        IntPtr @callbackData
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_cancel_void(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_free_void(IntPtr @handle);

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern void ffi_matrix_sdk_base_rust_future_complete_void(
        IntPtr @handle,
        ref UniffiRustCallStatus _uniffi_out_err
    );

    [DllImport("matrix_sdk_ffi", CallingConvention = CallingConvention.Cdecl)]
    public static extern uint ffi_matrix_sdk_base_uniffi_contract_version();

    static void uniffiCheckContractApiVersion()
    {
        var scaffolding_contract_version = _UniFFILib.ffi_matrix_sdk_base_uniffi_contract_version();
        if (26 != scaffolding_contract_version)
        {
            throw new UniffiContractVersionException(
                $"uniffi.matrix_sdk_base: uniffi bindings expected version `26`, library returned `{scaffolding_contract_version}`"
            );
        }
    }

    static void uniffiCheckApiChecksums() { }
}

// Public interface members begin here.

#pragma warning disable 8625

class FfiConverterUInt64 : FfiConverter<ulong, ulong>
{
    public static FfiConverterUInt64 INSTANCE = new FfiConverterUInt64();

    public override ulong Lift(ulong value)
    {
        return value;
    }

    public override ulong Read(BigEndianStream stream)
    {
        return stream.ReadULong();
    }

    public override ulong Lower(ulong value)
    {
        return value;
    }

    public override int AllocationSize(ulong value)
    {
        return 8;
    }

    public override void Write(ulong value, BigEndianStream stream)
    {
        stream.WriteULong(value);
    }
}

class FfiConverterString : FfiConverter<string, RustBuffer>
{
    public static FfiConverterString INSTANCE = new FfiConverterString();

    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    public override string Lift(RustBuffer value)
    {
        try
        {
            var bytes = value.AsStream().ReadBytes(Convert.ToInt32(value.len));
            return System.Text.Encoding.UTF8.GetString(bytes);
        }
        finally
        {
            RustBuffer.Free(value);
        }
    }

    public override string Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var bytes = stream.ReadBytes(length);
        return System.Text.Encoding.UTF8.GetString(bytes);
    }

    public override RustBuffer Lower(string value)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        var rbuf = RustBuffer.Alloc(bytes.Length);
        rbuf.AsWriteableStream().WriteBytes(bytes);
        return rbuf;
    }

    // TODO(CS)
    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    public override int AllocationSize(string value)
    {
        const int sizeForLength = 4;
        var sizeForString = System.Text.Encoding.UTF8.GetByteCount(value);
        return sizeForLength + sizeForString;
    }

    public override void Write(string value, BigEndianStream stream)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        stream.WriteInt(bytes.Length);
        stream.WriteBytes(bytes);
    }
}

class FfiConverterDuration : FfiConverterRustBuffer<TimeSpan>
{
    public static FfiConverterDuration INSTANCE = new FfiConverterDuration();

    // https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/TimeSpan.cs
    private const uint NanosecondsPerTick = 100;

    public override TimeSpan Read(BigEndianStream stream)
    {
        var seconds = stream.ReadULong();
        var nanoseconds = stream.ReadUInt();
        var ticks = seconds * TimeSpan.TicksPerSecond;
        ticks += nanoseconds / NanosecondsPerTick;
        return new TimeSpan(Convert.ToInt64(ticks));
    }

    public override int AllocationSize(TimeSpan value)
    {
        // 8 bytes for seconds, 4 bytes for nanoseconds
        return 12;
    }

    public override void Write(TimeSpan value, BigEndianStream stream)
    {
        stream.WriteULong(Convert.ToUInt64(value.Ticks / TimeSpan.TicksPerSecond));
        stream.WriteUInt(Convert.ToUInt32(value.Ticks % TimeSpan.TicksPerSecond * NanosecondsPerTick));
    }
}

/// <summary>
/// The retention policy for media content used by the [`EventCacheStore`].
///
/// [`EventCacheStore`]: crate::event_cache::store::EventCacheStore
/// </summary>
/// <param name="max_cache_size">
/// The maximum authorized size of the overall media cache, in bytes.
///
/// The cache size is defined as the sum of the sizes of all the (possibly
/// encrypted) media contents in the cache, excluding any metadata
/// associated with them.
///
/// If this is set and the cache size is bigger than this value, the oldest
/// media contents in the cache will be removed during a cleanup until the
/// cache size is below this threshold.
///
/// Note that it is possible for the cache size to temporarily exceed this
/// value between two cleanups.
///
/// Defaults to 400 MiB.
/// </param>
/// <param name="max_file_size">
/// The maximum authorized size of a single media content, in bytes.
///
/// The size of a media content is the size taken by the content in the
/// database, after it was possibly encrypted, so it might differ from the
/// initial size of the content.
///
/// The maximum authorized size of a single media content is actually the
/// lowest value between `max_cache_size` and `max_file_size`.
///
/// If it is set, media content bigger than the maximum size will not be
/// cached. If the maximum size changed after media content that exceeds the
/// new value was cached, the corresponding content will be removed
/// during a cleanup.
///
/// Defaults to 20 MiB.
/// </param>
/// <param name="last_access_expiry">
/// The duration after which unaccessed media content is considered
/// expired.
///
/// If this is set, media content whose last access is older than this
/// duration will be removed from the media cache during a cleanup.
///
/// Defaults to 60 days.
/// </param>
/// <param name="cleanup_frequency">
/// The duration between two automatic media cache cleanups.
///
/// If this is set, a cleanup will be triggered after the given duration
/// is elapsed, at the next call to the media cache API. If this is set to
/// zero, each call to the media cache API will trigger a cleanup. If this
/// is `None`, cleanups will only occur if they are triggered manually.
///
/// Defaults to running cleanups daily.
/// </param>
internal record MediaRetentionPolicy(
    /// <summary>
    /// The maximum authorized size of the overall media cache, in bytes.
    ///
    /// The cache size is defined as the sum of the sizes of all the (possibly
    /// encrypted) media contents in the cache, excluding any metadata
    /// associated with them.
    ///
    /// If this is set and the cache size is bigger than this value, the oldest
    /// media contents in the cache will be removed during a cleanup until the
    /// cache size is below this threshold.
    ///
    /// Note that it is possible for the cache size to temporarily exceed this
    /// value between two cleanups.
    ///
    /// Defaults to 400 MiB.
    /// </summary>
    ulong? @maxCacheSize,
    /// <summary>
    /// The maximum authorized size of a single media content, in bytes.
    ///
    /// The size of a media content is the size taken by the content in the
    /// database, after it was possibly encrypted, so it might differ from the
    /// initial size of the content.
    ///
    /// The maximum authorized size of a single media content is actually the
    /// lowest value between `max_cache_size` and `max_file_size`.
    ///
    /// If it is set, media content bigger than the maximum size will not be
    /// cached. If the maximum size changed after media content that exceeds the
    /// new value was cached, the corresponding content will be removed
    /// during a cleanup.
    ///
    /// Defaults to 20 MiB.
    /// </summary>
    ulong? @maxFileSize,
    /// <summary>
    /// The duration after which unaccessed media content is considered
    /// expired.
    ///
    /// If this is set, media content whose last access is older than this
    /// duration will be removed from the media cache during a cleanup.
    ///
    /// Defaults to 60 days.
    /// </summary>
    TimeSpan? @lastAccessExpiry,
    /// <summary>
    /// The duration between two automatic media cache cleanups.
    ///
    /// If this is set, a cleanup will be triggered after the given duration
    /// is elapsed, at the next call to the media cache API. If this is set to
    /// zero, each call to the media cache API will trigger a cleanup. If this
    /// is `None`, cleanups will only occur if they are triggered manually.
    ///
    /// Defaults to running cleanups daily.
    /// </summary>
    TimeSpan? @cleanupFrequency
) { }

class FfiConverterTypeMediaRetentionPolicy : FfiConverterRustBuffer<MediaRetentionPolicy>
{
    public static FfiConverterTypeMediaRetentionPolicy INSTANCE = new FfiConverterTypeMediaRetentionPolicy();

    public override MediaRetentionPolicy Read(BigEndianStream stream)
    {
        return new MediaRetentionPolicy(
            @maxCacheSize: FfiConverterOptionalUInt64.INSTANCE.Read(stream),
            @maxFileSize: FfiConverterOptionalUInt64.INSTANCE.Read(stream),
            @lastAccessExpiry: FfiConverterOptionalDuration.INSTANCE.Read(stream),
            @cleanupFrequency: FfiConverterOptionalDuration.INSTANCE.Read(stream)
        );
    }

    public override int AllocationSize(MediaRetentionPolicy value)
    {
        return 0
            + FfiConverterOptionalUInt64.INSTANCE.AllocationSize(value.@maxCacheSize)
            + FfiConverterOptionalUInt64.INSTANCE.AllocationSize(value.@maxFileSize)
            + FfiConverterOptionalDuration.INSTANCE.AllocationSize(value.@lastAccessExpiry)
            + FfiConverterOptionalDuration.INSTANCE.AllocationSize(value.@cleanupFrequency);
    }

    public override void Write(MediaRetentionPolicy value, BigEndianStream stream)
    {
        FfiConverterOptionalUInt64.INSTANCE.Write(value.@maxCacheSize, stream);
        FfiConverterOptionalUInt64.INSTANCE.Write(value.@maxFileSize, stream);
        FfiConverterOptionalDuration.INSTANCE.Write(value.@lastAccessExpiry, stream);
        FfiConverterOptionalDuration.INSTANCE.Write(value.@cleanupFrequency, stream);
    }
}

/// <summary>
/// Represents the state of a room encryption.
/// </summary>
internal enum EncryptionState : int
{
    /// <summary>
    /// The room is encrypted.
    /// </summary>
    Encrypted,

    /// <summary>
    /// The room is not encrypted.
    /// </summary>
    NotEncrypted,

    /// <summary>
    /// The state of the room encryption is unknown, probably because the
    /// `/sync` did not provide all data needed to decide.
    /// </summary>
    Unknown,
}

class FfiConverterTypeEncryptionState : FfiConverterRustBuffer<EncryptionState>
{
    public static FfiConverterTypeEncryptionState INSTANCE = new FfiConverterTypeEncryptionState();

    public override EncryptionState Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(EncryptionState), value))
        {
            return (EncryptionState)value;
        }
        else
        {
            throw new InternalException(
                String.Format("invalid enum value '{0}' in FfiConverterTypeEncryptionState.Read()", value)
            );
        }
    }

    public override int AllocationSize(EncryptionState value)
    {
        return 4;
    }

    public override void Write(EncryptionState value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

class FfiConverterOptionalUInt64 : FfiConverterRustBuffer<ulong?>
{
    public static FfiConverterOptionalUInt64 INSTANCE = new FfiConverterOptionalUInt64();

    public override ulong? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterUInt64.INSTANCE.Read(stream);
    }

    public override int AllocationSize(ulong? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterUInt64.INSTANCE.AllocationSize((ulong)value);
        }
    }

    public override void Write(ulong? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterUInt64.INSTANCE.Write((ulong)value, stream);
        }
    }
}

class FfiConverterOptionalDuration : FfiConverterRustBuffer<TimeSpan?>
{
    public static FfiConverterOptionalDuration INSTANCE = new FfiConverterOptionalDuration();

    public override TimeSpan? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterDuration.INSTANCE.Read(stream);
    }

    public override int AllocationSize(TimeSpan? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterDuration.INSTANCE.AllocationSize((TimeSpan)value);
        }
    }

    public override void Write(TimeSpan? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterDuration.INSTANCE.Write((TimeSpan)value, stream);
        }
    }
}
#pragma warning restore 8625
internal static class MatrixSdkBaseMethods { }
